library(nnet)
data_x<-data.frame(V1=c(3,2,5,4),V2=c(7,8,11,13))
data_y<-data.frame(hasil=c(0.2,8,11,13))
model.nnet<-nnet(x=data_x,y=data_y)
model.nnet<-nnet(x=data_x,y=data_y,size=10)
model.nnet
summary(model.nnet)
accuracy(model.nnet)
install.packages("RSSNS")
install.packages("RSNNS")
install.packages("nnfor")
runif(10)
data_input<-runif(100,min=0, max=100)
data_input<-runif(100,min=0, max=100)
data_output<-runif(100,min=0, max=100)
data_input<-runif(100,min=0, max=100)
data_output<-runif(100,min=0, max=100)
data_input<-ts(runif(100,min=0, max=100))
data_output<-ts(runif(100,min=0, max=100))
mlp(y=data_input,hd=c(5,10))
library(nnfor)
nnfor:mlp(y=data_input,hd=c(5,10))
nnfor::mlp(y=data_input,hd=c(5,10))
nnfor::model.mlp<-mlp(y=data_input,hd=c(5,10,15),m=10)
require(RSNNS)
require(quantmod)
slog<-as.ts(read.csv("logistic-x.csv",F))
View(model.nnet)
nnfor::model.mlp<-mlp(y=data_input,hd=c(5,10,15))
nnfor::model.mlp<-mlp(y=data_input,hd=c(5,10,15))
fit <- mlp(AirPassengers)
nnfor::model.mlp<-mlp(y=data_input,hd=c(5,10,15))
nnfor::model.mlp<-mlp(x=data_input,hd=c(5,10,15))
data_input<-ts(runif(100,min=0, max=100))
data_output<-ts(runif(100,min=0, max=100))
nnfor::model.mlp<-mlp(y=data_input,hd=c(2,3))
nnfor::model.mlp<-mlp(y=data_input)
nnfor::mlp(y=data_input,hd=c(2,3))
nnfor::model-mlp<-mlp(y=data_input,hd=c(2,3))
model.mlp<-mlp(y=data_input,hd=c(2,3))
nnfor::mlp(y=data_input,hd=c(2,3))
model.mlp<-nnfor::mlp(y=data_input,hd=c(2,3))
View(model.mlp)
model.mlp[["fitted"]]
data_output<-ts(runif(100,min=0, max=100))
data_output
model.mlp<-nnfor::mlp(y=data_input,hd=c(50,100,30))
train<-1:900
model.mlp<-nnfor::mlp(y=data_input,hd=c(3,10,2))
model.mlp<-nnfor::mlp(y=data_input,hd=c(30))
View(model.mlp)
model.mlp[["fitted"]]
model.mlp<-nnfor::mlp(y=data_input,hd=c(30,50))
require(RSNNS)
require(quantmod)
slog<-as.ts(read.csv("logistic-x.csv",F))
train<-1:900
y<-as.zoo(slog)
y
x1<-Lag(y,k=1)
View(x1)
View(y)
x2<-Lag(y,k=2)
x3<-Lag(y,k=3)
x4<-Lag(y,k=4)
x5<-Lag(y,k=5)
x6<-Lag(y,k=6)
x7<-Lag(y,k=7)
x8<-Lag(y,k=8)
x9<-Lag(y,k=9)
x10<-Lag(y,k=10)
slog<-cbind(y,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)
View(slog)
slog<-slog[-(1:10),]
require(RSNNS)
require(quantmod)
slog<-as.ts(read.csv("logistic-x.csv",F))
train<-1:900
y<-as.zoo(slog)
x1<-Lag(y,k=1)
x2<-Lag(y,k=2)
x3<-Lag(y,k=3)
x4<-Lag(y,k=4)
x5<-Lag(y,k=5)
x6<-Lag(y,k=6)
x7<-Lag(y,k=7)
x8<-Lag(y,k=8)
x9<-Lag(y,k=9)
x10<-Lag(y,k=10)
slog<-cbind(y,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)
slog<-slog[-(1:10),]
inputs<-slog[,2:11]
outputs<-slog[,1]
inputs
fit<-elman(x=inputs,
y=outputs,
size=c(3,2),
learnFuncParams=c(0.1),
maxit=5000)
plotIterativeError(fit)
fit<-elman(x=inputs,
y=outputs,
size=c(10,20,40),
learnFuncParams=c(0.1),
maxit=5000)
View(fit)
fit<-elman(x=inputs,
y=outputs,
size=c(3,5),
learnFuncParams=c(0.1),
maxit=5000)
View(fit)
require(RSNNS)
require(quantmod)
slog<-as.ts(read.csv("logistic-x.csv",F))
train<-1:900
y<-as.zoo(slog)
x1<-Lag(y,k=1)
x2<-Lag(y,k=2)
x3<-Lag(y,k=3)
x4<-Lag(y,k=4)
x5<-Lag(y,k=5)
x6<-Lag(y,k=6)
x7<-Lag(y,k=7)
x8<-Lag(y,k=8)
x9<-Lag(y,k=9)
x10<-Lag(y,k=10)
slog<-cbind(y,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)
slog<-slog[-(1:10),]
inputs<-slog[,2:11]
outputs<-slog[,1]
fit<-elman(x=inputs,
y=outputs,
size=c(3,5),
learnFuncParams=c(0.1),
maxit=5000)
View(fit)
require(RSNNS)
require(quantmod)
slog<-as.ts(read.csv("logistic-x.csv",F))
train<-1:900
y<-as.zoo(slog)
x1<-Lag(y,k=1)
x2<-Lag(y,k=2)
x3<-Lag(y,k=3)
x4<-Lag(y,k=4)
x5<-Lag(y,k=5)
x6<-Lag(y,k=6)
x7<-Lag(y,k=7)
x8<-Lag(y,k=8)
x9<-Lag(y,k=9)
x10<-Lag(y,k=10)
slog<-cbind(y,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)
dim(y)
slog<-slog[-(1:10),]
inputs<-slog[,2:11]
outputs<-slog[,1]
fit<-elman(x=inputs,
y=outputs,
size=c(5,10),
learnFuncParams=c(0.1),
maxit=5000)
plotIterativeError(fit)
fit<-elman(x=inputs,
y=outputs,
size=c(5,10),
learnFuncParams=c(0.1),
maxit=1000)
plotIterativeError(fit)
inputs
fit$fitted.values
View(fit$fitted.values)
require(Metrics)
Metrics::mape(outputs,fit$fitted.values)
fit<-elman(x=inputs,
y=outputs,
size=c(5,8,10),
learnFuncParams=c(0.1),
maxit=1000)
View(fit$fitted.values)
#View(fit$fitted.values)
Metrics::mape(outputs,fit$fitted.values)
fit<-elman(x=inputs,
y=outputs,
size=c(5,10,20),
learnFuncParams=c(0.1),
maxit=1000)
#View(fit$fitted.values)
Metrics::mape(outputs,fit$fitted.values)
library(forecast)
forecast::nnetar(y=inputs)
forecast::nnetar(y=as.ts(inputs))
forecast::nnetar(y=ts(inputs))
ts(inputs)
ts.inputs<-ts(inputs)
forecast::nnetar(y=ts.inputs)
View(ts.inputs)
forecast::nnetar(y=outputs)
forecast::nnetar(y=outputs) %>% accuracy
forecast::accuracy(nnetar(y=outputs))
nnetar.model<-forecast::accuracy(nnetar(y=outputs))
View(nnetar.model)
nnetar.model<-forecast::nnetar(y=outputs)
View(nnetar.model)
install.packages("tsDyn")
library(tsDyn)
lags.select(data=outputs)
lags.select(outputs)
lags.select(ts(outputs))
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
slog<-as.ts(read.csv("logistic-x.csv",F))
datamatrix<-data.matrix()
input.df<-data.frame()
for (a in c(1:3)) {
print(a)
}
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
slog<-as.ts(read.csv("logistic-x.csv",F))
m <- cbind(1, 1:7)
View(m)
input.df<-data.frame()
cbind(input.df,slog)
View(input.df)
input.df<-cbind(input.df,slog)
View(input.df)
input.df<-cbind(input.df,slog)
View(input.df)
input.df<-data.frame()
slog<-(read.csv("logistic-x.csv",F))
input.df<-data.frame()
input.df<-cbind(input.df,slog)
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
slog<-(read.csv("logistic-x.csv",F))
View(slog)
input.df<-data.frame()
input.df<-cbind(input.df,slog)
m <- cbind(1, 1:7,3:10)
m<-cbind(m,3:10)
View(m)
input.df<-data.frame(slog)
View(input.df)
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
slog<-(read.csv("logistic-x.csv",F))
input.df<-data.frame(slog)
m <- cbind(1, 1:7)
m<-cbind(m,3:10)
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
slog<-(read.csv("logistic-x.csv",F))
input.df<-data.frame(slog)
for (a in c(1:3)) {
input.df<-cbind(input.df,Lag(slog,k=a))
}
View(input.df)
library(vars)
#select lag
VARselect(slog)
#select lag
var.select<-VARselect(slog)
View(var.select)
var.select$selection[["AIC"]]
var.select$selection
var.select$selection[1]
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
library(vars)
slog<-(read.csv("logistic-x.csv",F))
input.df<-data.frame(slog)
#select lag
var.select<-VARselect(slog)
var.select$selection[1]
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
library(vars)
slog<-(read.csv("logistic-x.csv",F))
input.df<-data.frame(slog)
#select lag
var.select<-VARselect(slog)
var.select$selection[1]
for (a in c(1:var.select$selection[1])) {
input.df<-cbind(input.df,Lag(slog,k=a))
}
train<-1:900
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
library(vars)
slog<-(read.csv("logistic-x.csv",F))
input.df<-data.frame(y=slog)
#select lag
var.select<-VARselect(slog)
var.select$selection[1]
for (a in c(1:var.select$selection[1])) {
input.df<-cbind(input.df,Lag(slog,k=a))
}
View(input.df)
input.df<-input.df[-(1:var.select$selection[1]),]
View(input.df)
optimum.aic<-var.select$selection[1]
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
library(vars)
slog<-(read.csv("logistic-x.csv",F))
input.df<-data.frame(y=slog)
#select lag
var.select<-VARselect(slog)
optimum.aic<-var.select$selection[1]
for (a in c(1:optimum.aic)) {
input.df<-cbind(input.df,Lag(slog,k=a))
}
input.df<-input.df[-(1:optimum.aic),]
inputs<-input.df[,2:optimum.aic+1]
outputs<-input.df[,1]
inputs
View(inputs)
outputs
View(outputs)
inputs<-input.df[,2:optimum.aic+1]
outputs<-input.df[,1]
fit<-elman(x=inputs,
y=outputs,
size=c(5,10,20),
learnFuncParams=c(0.1),
maxit=1000)
plotIterativeError(fit)
#View(fit$fitted.values)
Metrics::mape(outputs,fit$fitted.values)
ts.inputs<-ts(inputs)
nnetar.model<-forecast::nnetar(y=outputs)
lags.select(ts(outputs))
accuracy(nnetar.model)
accuracy(forecast(nnetar.model))
accuracy(nnetar.model)
forecast::accuracy(nnetar.model)
predict(fit,c(0.19575446	0.94770739	0.39963029	0.88578203))
RSNNS::predict(fit,c(0.19575446	0.94770739	0.39963029	0.88578203))
RSNNS::predict(fit,c(0.19575446,	0.94770739,	0.39963029,	0.88578203))
RSNNS::predict(fit)
output.df<-data.frame(Lag.1=0.19575446)
output.df<-data.frame(Lag.1=0.19575446,Lag.2=0.94770739,Lag.3=0.39963029,Lag.4=0.88578203)
RSNNS::predict(fit,output.df)
predict(fit,output.df)
output.df<-data.frame(Lag.1=0.19575446,Lag.2=0.94770739,Lag.3=0.39963029,Lag.4=0.88578203)
predict(fit,output.df)
output.df<-data.frame(Lag.1=0.19575446,Lag.2=0.94770739,Lag.3=0.39963029)
predict(fit,output.df)
View(output.df)
View(input.df)
output.df<-data.frame(Lag.1=0.33952762,Lag.2=0.90502301,Lag.3=0.35550000,Lag.4=0.10000000)
predict(fit,output.df)
output.df<-data.frame(Lag.1=0.33952762,Lag.2=0.90502301,Lag.3=0.35550000,Lag.4=0.10000000)
predict(fit,output.df)
output.df<-data.frame(Lag.1=0.33952762,Lag.2=0.90502301,Lag.3=0.35550000)
predict(fit,output.df)
fit<-elman(x=inputs,
y=outputs,
size=c(5,10,20),
maxit=1000)
plotIterativeError(fit)
#View(fit$fitted.values)
Metrics::mape(outputs,fit$fitted.values)
ts.inputs<-ts(inputs)
output.df<-data.frame(Lag.1=0.33952762,Lag.2=0.90502301,Lag.3=0.35550000,Lag.4=0.10000000)
predict(fit,output.df)
inputs
View(inputs)
View(input.df)
optimum.aic
optimum.aic+1
input.df
as.int(optimum.aic)
int(optimum.aic)
(optimum.aic)
as.null(optimum.aic)
as.null(optimum.aic)
View(var.select)
var.select[["selection"]][["AIC(n)"]]
optimum.aic<-var.select[["selection"]][["AIC(n)"]]
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
library(vars)
slog<-(read.csv("logistic-x.csv",F))
input.df<-data.frame(y=slog)
#select lag
var.select<-VARselect(slog)
optimum.aic<-var.select[["selection"]][["AIC(n)"]]
for (a in c(1:optimum.aic)) {
input.df<-cbind(input.df,Lag(slog,k=a))
}
input.df<-input.df[-(1:optimum.aic),]
as.null(optimum.aic)
inputs<-input.df[,2:optimum.aic+1]
outputs<-input.df[,1]
fit<-elman(x=inputs,
y=outputs,
size=c(5,10,20),
maxit=1000)
plotIterativeError(fit)
#View(fit$fitted.values)
Metrics::mape(outputs,fit$fitted.values)
ts.inputs<-ts(inputs)
output.df<-data.frame(Lag.1=0.33952762,Lag.2=0.90502301,Lag.3=0.35550000,Lag.4=0.10000000)
predict(fit,output.df)
View(fit)
fit<-elman(x=inputs,
y=outputs,
size=c(5,10,20),
maxit=1000)
plotIterativeError(fit)
inputs
inputs<-input.df[,2:optimum.aic+1]
View(inputs)
optimum.aic
2:optimum.aic+1
inputs<-input.df[,2:(optimum.aic+1)]
outputs<-input.df[,1]
require(RSNNS)
require(quantmod)
require(Metrics)
library(forecast)
library(tsDyn)
library(vars)
slog<-(read.csv("logistic-x.csv",F))
input.df<-data.frame(y=slog)
#select lag
var.select<-VARselect(slog)
optimum.aic<-var.select[["selection"]][["AIC(n)"]]
for (a in c(1:optimum.aic)) {
input.df<-cbind(input.df,Lag(slog,k=a))
}
input.df<-input.df[-(1:optimum.aic),]
inputs<-input.df[,2:(optimum.aic+1)]
outputs<-input.df[,1]
fit<-elman(x=inputs,
y=outputs,
size=c(5,10,20),
maxit=1000)
plotIterativeError(fit)
#View(fit$fitted.values)
Metrics::mape(outputs,fit$fitted.values)
output.df<-data.frame(Lag.1=0.33952762,Lag.2=0.90502301,Lag.3=0.35550000,Lag.4=0.10000000)
predict(fit,output.df)
